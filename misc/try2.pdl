#!perl

use latest;
use strict;

use PDL::Core qw[ topdl ];

no autovivification;
no autovivification 'strict';


use Data::Alias;

use Params::Validate qw[ ARRAYREF validate ];

use PDL::Graphics::PGPLOT;
use Math::BigFloat;
use Safe::Isa;
use List::Gen qw[ zip mapn ];

use DDP alias => 'pp';

sub pa { say join ' ', map { my $x = $_ ; 'ARRAY' eq ref $x ? @$x : $x } @_  }

# D + W/2 - N * W < n * W - R

# Wmin = R / n

# Nmax = D / ( R / n )

# D/R + f/2 - N * f < n * f - 1

# D/R + f * ( 1/2 - N ) - n * f + 1 < 0

# D/R + f * ( 1/2 - N - n ) + 1 < 0

# D/R - f * ( N + n - 1/2 ) + 1 < 0



sub N {
	my ( $DR, $f, $offset ) = @_;

	return POSIX::floor( $DR / $f + $offset );

}


sub _f {

	my ( $DR, $N, $offset ) = @_;

	$DR / ( $N - $offset );
}

sub _f_x {

	my ( $DR, $N, $offset, $nbin ) = @_;

	my $f = ( $DR + 1 ) / ( $N + $nbin - $offset );

	$f;
}

sub _opt0 {

	my ( $DR, $f, $N, $offset, $nbin ) = @_;

	$DR - $f * ( $N + $nbin - $offset ) + 1;

#	( $DR + 1 ) / ( $N + $nbin - $offset ) - $f;
}


sub _opt1 {

	my ( $DR, $f, $N ) = @_;

	$DR - $f * ( 0.5 + $N ) + 1;
}

sub _opt2 {

	my ( $DR, $f, $offset, $nbin ) = @_;

	my $N = N( $DR, $f, $offset );

	return _opt0( $DR, $f, $N, $offset, $nbin );
}

sub opt2 {

	my ( $DR, $f, $bound) = @_;

	# this has round-off problems
	my $N = N( $DR, $f, 1 );

	my $opt0 = _opt( $DR, $f, $N );

	return $opt0 unless $bound;

	# check if round-off has made $N too large
	my $opt1 = _opt( $DR, $f, $N+1 );

	return $opt0 > 0 && $opt1 < 0 ? $opt1 : $opt0;
}


sub analyze_scn {

    my ( $f, $opt, $N, %attr ) = @_;

    my $bin_width = $f * ( $attr{r1} - $attr{r0} );

    my $align_edge = $attr{align}[0] - $bin_width * $attr{align}[1];

    print "align: ";
    pa $attr{align};
    say "edge = $align_edge";

    my $idx = floor( ($attr{r0} - $align_edge ) / $bin_width );

    say join " \t", '', qw[ N idx f opt bin_width opt_range range min r0 r1 max ];

    my $res = cat(
		  topdl($N),
		  topdl($idx),
		  topdl($f),
		  topdl($opt),
		  topdl($bin_width),
		  topdl($bin_width * $attr{nbins}),
		  pdl( $attr{r1} - $attr{r0} ),
		  topdl($align_edge + $idx * $bin_width),
		  pdl($attr{r0}),
		  pdl($attr{r1}),
		  topdl($align_edge + $idx * $bin_width + $attr{nbins} * $bin_width),
		 );

    say $res->ndims == 1 ? $res->dummy(0)->transpose : $res->transpose;
}

sub scn {

    my $attr = validate( @_,
			 { r0 => 1,
			   r1 => 1,
			   align  => { type => ARRAYREF },
			   nbins  => { default => 1 },
			   min    => 0,
			   max    => 0,
			   Nsamp  => 0,
			   Nmax   => 0,
			 } );

    my %attr = %$attr;

    say "attr: "; pp %attr;

    my @dist = ( $attr{r0} - $attr{align}[0], $attr{r1} - $attr{align}[0] );

    say "dist: ";
    pp @dist;

    my @abs_dist = map { abs( $_ ) } @dist;

    my $min_idx = $abs_dist[0] > $abs_dist[1] || 0;
    my $min_dist = $abs_dist[$min_idx];

    $attr{DR} = $min_dist / ( $attr{r1} - $attr{r0} );
    $attr{offset} = $dist[$min_idx] < 0 ? 1 - $attr{align}[1] : $attr{align}[1];

    my %res = scan( map { $_ => $attr{$_} } 
		    grep { exists $attr{$_} } 
		    qw/ DR offset nbins min max Nsamp Nmax / );

    say "f_x";
    eval {
	analyze_scn( $res{f_x}, $res{opt_x}, $res{N_x}, %attr );
    };

    eval {
	say "fmax";
	analyze_scn( $res{fmax}, $res{opt_fmax}, $res{Nmax}, %attr );
    };

    return %res;

}


sub scan {

    my $attr = validate( @_,
			 { DR => 1,
			   offset => { default => 0.5 },,
			   nbins  => { default => 1 },
			   min    => { default => 0 },
			   max    => { default => undef },
			   Nsamp  => { default => 1000 },
			   Nmax   => 0, 
			 } );


    alias my %attr = %$attr;

    $attr{min} = 1e-6 if $attr{min} == 0;

    $attr{Nmax} //= POSIX::floor($attr{DR} * $attr{nbins}) + 1;

    my @Nmax = 1 .. $attr{Nmax};

    my @fmax = map {
	_f_x( $attr{DR}, $_, $attr{offset}, $attr{nbins} )
	} @Nmax;

    $attr{max} //= $fmax[0];

    pp %attr;

    my @opt_fmax = mapn { _opt0( $attr{DR},
				 $_[0],
				 $_[1],
				 $attr{offset},
				 $attr{nbins} )
		      } 2, zip \@fmax, \@Nmax;

    my $Nmax = pdl( \@Nmax );
    my $fmax = pdl( \@fmax );
    my $opt_fmax = pdl( \@opt_fmax );

    say "Nmax fmax opt_fmax";
    say ( cat( $Nmax, $fmax, $opt_fmax, )->transpose );


    my @fscan = map {
	$attr{min} + ($attr{max}-$attr{min}) * $_ / $attr{Nsamp} 
    }  0..$attr{Nsamp}-1;
    my @opt_fscan = map { _opt2($attr{DR}, $_, $attr{offset}, $attr{nbins} ) } @fscan ;


    my $fscan = pdl( \@fscan );
    my $opt_fscan = pdl( \@opt_fscan );

    my $f = $fscan;
    $f = $fscan->append( $fmax );

    my $opt_f = $opt_fscan->append($opt_fmax);

    my @limits = limits( [where( $fscan, $opt_fscan, $fscan < $attr{max} )],
			 [where( $fmax, $opt_fmax, $fmax < $attr{max} ) ]
			 );

    my @env_limits = ( $attr{min}, $attr{max},
		       $limits[-2], $limits[-1] );

    say "@env_limits";

    env( @env_limits, { axis => 'Axes' } );

    my $idx = $f->qsorti;
    $f = $f->index($idx)->sever;
    $opt_f = $opt_f->index($idx)->sever;

    points $fmax, $opt_fmax, { symbol => 8, color => 'red' };
    points $f,    $opt_f, { symbol => -4, color => 'blue' };
    line $f,      $opt_f;
    line pdl( $f->minmax ), pdl( 0, 0 ), { color => 'red' };

    my %results = ( fscan => $fscan,
		    opt_fscan => $opt_fscan,
		    Nmax => $Nmax,
		    fmax => $fmax,
		    opt_fmax => $opt_fmax,
		  );

    my ( $N_x ) = $Nmax->where( $fmax > 1 / $attr{nbins} );

    if ( $N_x->nelem ) {

	my $f_x   = pdl( map { _f_x( $attr{DR}, $_, $attr{offset}, $attr{nbins} ) } $N_x->list );
	my $opt_x = pdl( mapn { _opt0( $attr{DR},
				       $_[0],
				       $_[1],
				       $attr{offset},
				       $attr{nbins} )
			    } 2, zip [ $f_x->list ], [ $N_x->list ]
		       );


	say "N_x   = ", $N_x;
	say "f_x   = ", $f_x;
	say "opt_x = ", $opt_x;

	say cat( $N_x, $f_x )->transpose;

	points $f_x, $opt_x, { symbol => 12, color => 'green' };

	$results{N_x} = $N_x;
	$results{f_x} = $f_x;
	$results{opt_x} = $opt_x;

    }

    else {
	say "No opt < 0 found";

	$results{N_x} = PDL->null;
	$results{f_x} = PDL->null;
	$results{opt_x} = PDL->null;
    }

    release;

    return %results;
}


# iterative find a solution to the equality. 
sub iter {

	my $DR = shift;
	my $N = shift // 1000 ;

	my @f = ( 0 );
	while ( $N -- ) {

		push @f, dD( $DR, 1 + $f[-1] );
		last if opt($DR, $f[-1] ) < 0;

	}

	shift @f;
	my $f = pdl( @f ) ;
	points $f, opt($DR, $f), { symbol => 4 };

	say "ITER = $N, $f[-1]";

}

1;
